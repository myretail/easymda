#set ($generatedFile = "${entity.packagePath}/${entity.daoImplementationName}.java")
// license-header java merge-point
#if ($entity.daoImplementationRequired)
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
#else
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
//
#end

#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

import com.demo.entity.basic.NumberQuery;
import com.demo.entity.basic.DateTimeQuery;
//import ${stringUtils.substring(${entity.packageName}, 0,${stringUtils.lastIndexOf(${entity.packageName}, '.')})}.util.ProjectUtil;
//import ${stringUtils.substring(${entity.packageName}, 0,${stringUtils.lastIndexOf(${entity.packageName}, '.')})}.util.QueryAssCriteria;
import com.demo.util.ProjectUtil;
import com.demo.util.QueryAssCriteria;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Projections;
##
#set ($daoInheritance = $entity.generalization && $daoInheritanceEnabled)
##
/**
 * @see $entity.fullyQualifiedName
 */
public class $entity.daoImplementationName
    extends $entity.fullyQualifiedDaoBaseName
{
#foreach ($operation in $entity.daoBusinessOperations)
#set ($returnType = $operation.returnType)
#set ($returnObject = "returnValue")
#set ($signature = $operation.implementationSignature)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${operation.getSignature(false)}
     */
    protected $returnType.fullyQualifiedName $signature
#if ($operation.exceptionsPresent)
        throws $operation.exceptionList
#end
    {
        // ${toDoTag} implement $operation.visibility $returnType.fullyQualifiedName $signature
        final Session session = getSession(false);

        try
        {
            final Criteria criteria = session.createCriteria(${entity.fullyQualifiedName}Impl.class);
            if (${entity.name} != null) QueryAssCriteria.get${entity.name}Criteria(${entity.name},criteria);
            
            int totalCount = ((Integer) criteria.setProjection(Projections.rowCount()).uniqueResult()).intValue();
      
		      criteria.setProjection(null);  
		      ${entity.name} or=new ${entity.fullyQualifiedName}Impl();
		     or.setId(new Long(totalCount));
		     //or.setRemark(new Integer(totalCount).toString());
		     if (pageNumber > 0 && pageSize > 0)
		     {
		     	criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
		     	criteria.setMaxResults(pageSize);
		     }else{
		     	criteria.setMaxResults(100);
		     }
		     java.util.List re = criteria.list();
		     re.add(or);
		     return re;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }

        

}

#end//end foreach
#foreach ($valueObjectRef in $entity.valueObjectReferences)
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedEntityName, $valueObjectRef.targetElement.fullyQualifiedName)
     */
    public void ${valueObjectRef.transformationMethodName}(
        $entity.fullyQualifiedEntityName source,
        $valueObjectRef.targetElement.fullyQualifiedName target)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationMethodName}
        super.${valueObjectRef.transformationMethodName}(source, target);
#foreach ($property in $valueObjectRef.targetElement.allProperties)
#foreach ($entityProp in $entity.allProperties)
#if ($property.name == $entityProp.name)
#set ($getVal = false)
#set ($getVal = $converter.typeConvert($entityProp.type.fullyQualifiedName, "source.${entityProp.getterName}()", $property.type.fullyQualifiedName) )
#if (!$getVal)
        // WARNING! No conversion for target.${property.name} (can't convert source.${entityProp.getterName}():${entityProp.type.fullyQualifiedName} to $property.type.fullyQualifiedName
	#if (${entityProp.type.name}=='double' || ${entityProp.type.name}=='long')
		NumberQuery ${property.name}Num=new NumberQuery();
        ${property.name}Num.setUpNumber(source.${entityProp.getterName}());
        target.${entityProp.setterName}(${property.name}Num);
		//{entityProp.type.name}	= ${entityProp.type.name}	
	#elseif(${entityProp.type.name}=='Date' || ${entityProp.type.name}=='date'||${entityProp.type.name}=='ca' )
		DateTimeQuery ${property.name}day=new DateTimeQuery();
        ${property.name}day.setUpDate(ProjectUtil.getFullDateStr(source.${entityProp.getterName}()));
        target.${entityProp.setterName}(${property.name}day);
	#else
		if(source.${entityProp.getterName}()!=null)target.${entityProp.setterName}(this.get${entityProp.type.name}Dao().to${entityProp.type.name}VO(source.${entityProp.getterName}()));
	#end
#end
#end
#end
#end
    }


    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationMethodName}($entity.fullyQualifiedName)
     */
    public $valueObjectRef.targetElement.fullyQualifiedName ${valueObjectRef.transformationMethodName}(final $entity.fullyQualifiedName entity)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationMethodName}
        return super.${valueObjectRef.transformationMethodName}(entity);
    }


    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private $entity.fullyQualifiedEntityName load${entity.name}From${valueObjectRef.targetElement.name}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name))
    {
        // ${toDoTag} implement load${entity.name}From${valueObjectRef.targetElement.name}
        //throw new java.lang.UnsupportedOperationException("${entity.packageName}.load${entity.name}From${valueObjectRef.targetElement.name}($valueObjectRef.targetElement.fullyQualifiedName) not yet implemented.");

        /* A typical implementation looks like this:*/
        $entity.fullyQualifiedEntityName $stringUtils.uncapitalize($entity.name) = this.load(${stringUtils.uncapitalize($valueObjectRef.name)}.getId());
        if ($stringUtils.uncapitalize($entity.name) == null)
        {
            $stringUtils.uncapitalize($entity.name) = ${entity.fullyQualifiedEntityName}.Factory.newInstance();
        }
        return $stringUtils.uncapitalize($entity.name);
        
    }

    
    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName)
     */
    public $entity.fullyQualifiedEntityName ${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName $stringUtils.uncapitalize($valueObjectRef.name))
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationToEntityMethodName}
        $entity.fullyQualifiedEntityName entity = this.load${entity.name}From${valueObjectRef.targetElement.name}($stringUtils.uncapitalize($valueObjectRef.name));
        this.${valueObjectRef.transformationToEntityMethodName}($stringUtils.uncapitalize($valueObjectRef.name), entity, true);
        return entity;
    }


    /**
     * @see ${entity.fullyQualifiedDaoName}#${valueObjectRef.transformationToEntityMethodName}($valueObjectRef.targetElement.fullyQualifiedName, $entity.fullyQualifiedEntityName)
     */
    public void ${valueObjectRef.transformationToEntityMethodName}(
        $valueObjectRef.targetElement.fullyQualifiedName source,
        $entity.fullyQualifiedEntityName target,
        boolean copyIfNull)
    {
        // ${toDoTag} verify behavior of ${valueObjectRef.transformationToEntityMethodName}
        super.${valueObjectRef.transformationToEntityMethodName}(source, target, copyIfNull);
#set ($attributes = $entity.getAttributes(true,false))
#foreach ($attribute in $entity.allProperties)
#foreach ($voProperty in $valueObjectRef.targetElement.allProperties)
#if ($attribute.name == $voProperty.name)
#set ($getVal = false)
#set ($getVal = $converter.typeConvert($voProperty.type.fullyQualifiedName, "source.${voProperty.getterName}()", $attribute.type.fullyQualifiedName) )
#if (!$getVal)
        // No conversion for target.${attribute.name} (can't convert source.${voProperty.getterName}():${voProperty.type.fullyQualifiedName} to $attribute.type.fullyQualifiedName
	#if (${attribute.type.name}=='double' || ${attribute.type.name}=='long')
		if(source.${voProperty.getterName}()!=null)target.${voProperty.setterName}(source.${voProperty.getterName}().getUpNumber());	
	#elseif(${attribute.type.name}=='Date' || ${attribute.type.name}=='date'||${attribute.type.name}=='ca' )
		if(source.${voProperty.getterName}()!=null)target.${voProperty.setterName}(ProjectUtil.getDate(source.${voProperty.getterName}().getUpDate()));
	#else
		if(source.${voProperty.getterName}()!=null)target.${voProperty.setterName}(this.get${attribute.type.name}Dao().load(source.${voProperty.getterName}().getId()));
	#end
#end
#end
#end
#end
    }

#end
}