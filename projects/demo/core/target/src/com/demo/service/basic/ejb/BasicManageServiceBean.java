// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringSessionBean.vsl in andromda-spring-cartridge.
//
package com.demo.service.basic.ejb;

/**
 * @see com.demo.service.basic.BasicManageService
 */
public class BasicManageServiceBean
    extends org.springframework.ejb.support.AbstractStatelessSessionBean
    implements com.demo.service.basic.BasicManageService
{
    private com.demo.service.basic.BasicManageService basicManageService;

    /**
     * @see com.demo.service.basic.BasicManageService#createEnumeration(com.demo.entity.basic.EnumerationVO)
     */
    public long createEnumeration(com.demo.entity.basic.EnumerationVO Enumeration)
    {

        try
        {
            return this.basicManageService.createEnumeration(Enumeration);
        }
        catch (Exception exception)
        {
            final Throwable cause = getRootCause(exception);
            if (cause instanceof Exception)
            {
                throw new javax.ejb.EJBException((Exception)cause);
            }
            throw new javax.ejb.EJBException(exception);
        }
    }

    /**
     * @see com.demo.service.basic.BasicManageService#updateEnumeration(com.demo.entity.basic.EnumerationVO)
     */
    public void updateEnumeration(com.demo.entity.basic.EnumerationVO Enumeration)
    {

        try
        {
            this.basicManageService.updateEnumeration(Enumeration);
        }
        catch (Exception exception)
        {
            final Throwable cause = getRootCause(exception);
            if (cause instanceof Exception)
            {
                throw new javax.ejb.EJBException((Exception)cause);
            }
            throw new javax.ejb.EJBException(exception);
        }
    }

    /**
     * @see com.demo.service.basic.BasicManageService#deleteEnumeration(long)
     */
    public void deleteEnumeration(long id)
    {

        try
        {
            this.basicManageService.deleteEnumeration(id);
        }
        catch (Exception exception)
        {
            final Throwable cause = getRootCause(exception);
            if (cause instanceof Exception)
            {
                throw new javax.ejb.EJBException((Exception)cause);
            }
            throw new javax.ejb.EJBException(exception);
        }
    }

    /**
     * @see com.demo.service.basic.BasicManageService#getEnumeration(com.demo.entity.basic.EnumerationVO, int, int, java.lang.String)
     */
    public com.demo.entity.basic.EnumerationVO[] getEnumeration(com.demo.entity.basic.EnumerationVO Enumeration, int pageNumber, int pageSize, java.lang.String orderBy)
    {

        try
        {
            return this.basicManageService.getEnumeration(Enumeration, pageNumber, pageSize, orderBy);
        }
        catch (Exception exception)
        {
            final Throwable cause = getRootCause(exception);
            if (cause instanceof Exception)
            {
                throw new javax.ejb.EJBException((Exception)cause);
            }
            throw new javax.ejb.EJBException(exception);
        }
    }

    /**
     * @see com.demo.service.basic.BasicManageService#getEnumerationByType(java.lang.String)
     */
    public com.demo.entity.basic.EnumerationVO[] getEnumerationByType(java.lang.String eType)
    {

        try
        {
            return this.basicManageService.getEnumerationByType(eType);
        }
        catch (Exception exception)
        {
            final Throwable cause = getRootCause(exception);
            if (cause instanceof Exception)
            {
                throw new javax.ejb.EJBException((Exception)cause);
            }
            throw new javax.ejb.EJBException(exception);
        }
    }

    /**
     * Every Spring Session EJB needs to
     * call this to instantiate the Spring
     * Business Object.
     *
     * @see org.springframework.ejb.support.AbstractStatelessSessionBean#onEjbCreate()
     */
    protected void onEjbCreate()
    {
        this.basicManageService = (com.demo.service.basic.BasicManageService)
            getBeanFactory().getBean("basicManageService");
    }

    /**
     * Override default BeanFactoryLocator implementation to
     * provide singleton loading of the application context Bean factory.
     *
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(javax.ejb.SessionContext sessionContext)
    {
        super.setSessionContext(sessionContext);
        super.setBeanFactoryLocator(
            org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance("beanRefFactory.xml"));
        super.setBeanFactoryLocatorKey("beanRefFactory");
    }

    /**
     * Finds the root cause of the parent exception
     * by traveling up the exception tree.
     */
    private static Throwable getRootCause(Throwable throwable)
    {
        if (throwable != null)
        {
            // Reflectively get any exception causes.
            try
            {
                Throwable targetException = null;

                // java.lang.reflect.InvocationTargetException
                String exceptionProperty = "targetException";
                if (org.apache.commons.beanutils.PropertyUtils.isReadable(throwable, exceptionProperty))
                {
                    targetException = (Throwable)org.apache.commons.beanutils.PropertyUtils.getProperty(throwable, exceptionProperty);
                }
                else
                {
                    exceptionProperty = "causedByException";
                    //javax.ejb.EJBException
                    if (org.apache.commons.beanutils.PropertyUtils.isReadable(throwable, exceptionProperty))
                    {
                        targetException = (Throwable)org.apache.commons.beanutils.PropertyUtils.getProperty(throwable, exceptionProperty);
                    }
                }
                if (targetException != null)
                {
                    throwable = targetException;
                }
            }
            catch (Exception exception)
            {
                // just print the exception and continue
                exception.printStackTrace();
            }
            if (throwable.getCause() != null)
            {
                throwable = throwable.getCause();
                throwable = getRootCause(throwable);
            }
        }
        return throwable;
    }
}