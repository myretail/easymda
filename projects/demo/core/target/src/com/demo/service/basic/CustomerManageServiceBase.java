// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.demo.service.basic;

/**
 * <p>
 * Spring Service base class for <code>com.demo.service.basic.CustomerManageService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.demo.service.basic.CustomerManageService
 */
public abstract class CustomerManageServiceBase
    implements com.demo.service.basic.CustomerManageService
{

    private com.demo.entity.basic.CustomerDao customerDao;

    /**
     * Sets the reference to <code>customer</code>'s DAO.
     */
    public void setCustomerDao(com.demo.entity.basic.CustomerDao customerDao)
    {
        this.customerDao = customerDao;
    }

    /**
     * Gets the reference to <code>customer</code>'s DAO.
     */
    protected com.demo.entity.basic.CustomerDao getCustomerDao()
    {
        return this.customerDao;
    }

    /**
     * @see com.demo.service.basic.CustomerManageService#createCustomer(com.demo.entity.basic.CustomerVO)
     */
    public long createCustomer(final com.demo.entity.basic.CustomerVO Customer)
    {
        if (Customer == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.basic.CustomerManageService.createCustomer(com.demo.entity.basic.CustomerVO Customer) - 'Customer' can not be null");
        }
        try
        {
            return this.handleCreateCustomer(Customer);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.basic.CustomerManageServiceException(
                "Error performing 'com.demo.service.basic.CustomerManageService.createCustomer(com.demo.entity.basic.CustomerVO Customer)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #createCustomer(com.demo.entity.basic.CustomerVO)}
      */
    protected abstract long handleCreateCustomer(com.demo.entity.basic.CustomerVO Customer)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.basic.CustomerManageService#updateCustomer(com.demo.entity.basic.CustomerVO)
     */
    public void updateCustomer(final com.demo.entity.basic.CustomerVO Customer)
    {
        if (Customer == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.basic.CustomerManageService.updateCustomer(com.demo.entity.basic.CustomerVO Customer) - 'Customer' can not be null");
        }
        try
        {
            this.handleUpdateCustomer(Customer);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.basic.CustomerManageServiceException(
                "Error performing 'com.demo.service.basic.CustomerManageService.updateCustomer(com.demo.entity.basic.CustomerVO Customer)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #updateCustomer(com.demo.entity.basic.CustomerVO)}
      */
    protected abstract void handleUpdateCustomer(com.demo.entity.basic.CustomerVO Customer)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.basic.CustomerManageService#deleteCustomer(long)
     */
    public void deleteCustomer(final long id)
    {
        try
        {
            this.handleDeleteCustomer(id);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.basic.CustomerManageServiceException(
                "Error performing 'com.demo.service.basic.CustomerManageService.deleteCustomer(long id)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deleteCustomer(long)}
      */
    protected abstract void handleDeleteCustomer(long id)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.basic.CustomerManageService#getCustomer(com.demo.entity.basic.CustomerVO, int, int, java.lang.String)
     */
    public com.demo.entity.basic.CustomerVO[] getCustomer(final com.demo.entity.basic.CustomerVO Customer, final int pageNumber, final int pageSize, final java.lang.String orderBy)
    {
        if (Customer == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.basic.CustomerManageService.getCustomer(com.demo.entity.basic.CustomerVO Customer, int pageNumber, int pageSize, java.lang.String orderBy) - 'Customer' can not be null");
        }
        if (orderBy == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.basic.CustomerManageService.getCustomer(com.demo.entity.basic.CustomerVO Customer, int pageNumber, int pageSize, java.lang.String orderBy) - 'orderBy' can not be null");
        }
        try
        {
            return this.handleGetCustomer(Customer, pageNumber, pageSize, orderBy);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.basic.CustomerManageServiceException(
                "Error performing 'com.demo.service.basic.CustomerManageService.getCustomer(com.demo.entity.basic.CustomerVO Customer, int pageNumber, int pageSize, java.lang.String orderBy)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getCustomer(com.demo.entity.basic.CustomerVO, int, int, java.lang.String)}
      */
    protected abstract com.demo.entity.basic.CustomerVO[] handleGetCustomer(com.demo.entity.basic.CustomerVO Customer, int pageNumber, int pageSize, java.lang.String orderBy)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.demo.PrincipalStore.get();
    }

    /**
     * Adds an attachment in the webservice's outgoing response message (this only makes sense
     * when the operation this is called within is a web service exposed operation).
     *
     * @param content the actual content to add as the attachment.
     * @param contentType the type of the contents
     * @param dime whether or not DIME should be used (instead of MIME).
     */
    protected void addOutgoingWebServiceAttachment(final Object content, final String contentType, boolean dime)
        throws java.lang.Exception
    {
        com.demo.AttachmentHandler.saveAttachment(content, contentType, dime);
    }

    /**
     * Retrieves any incoming attachments in the webservice's request message (this only makes sense
     * when the operation this is called within is a web service exposed operation).
     */
    protected javax.activation.DataHandler[] getIncomingWebServiceAttachments()
        throws java.lang.Exception
    {
        return com.demo.AttachmentHandler.getAttachments();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.demo.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}