// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.demo.service.order;

/**
 * <p>
 * Spring Service base class for <code>com.demo.service.order.OrderRowTaskManageService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.demo.service.order.OrderRowTaskManageService
 */
public abstract class OrderRowTaskManageServiceBase
    implements com.demo.service.order.OrderRowTaskManageService
{

    private com.demo.entity.order.OrderRowTaskDao orderRowTaskDao;

    /**
     * Sets the reference to <code>orderRowTask</code>'s DAO.
     */
    public void setOrderRowTaskDao(com.demo.entity.order.OrderRowTaskDao orderRowTaskDao)
    {
        this.orderRowTaskDao = orderRowTaskDao;
    }

    /**
     * Gets the reference to <code>orderRowTask</code>'s DAO.
     */
    protected com.demo.entity.order.OrderRowTaskDao getOrderRowTaskDao()
    {
        return this.orderRowTaskDao;
    }

    private com.demo.entity.order.OrderRowdDao orderRowdDao;

    /**
     * Sets the reference to <code>orderRowd</code>'s DAO.
     */
    public void setOrderRowdDao(com.demo.entity.order.OrderRowdDao orderRowdDao)
    {
        this.orderRowdDao = orderRowdDao;
    }

    /**
     * Gets the reference to <code>orderRowd</code>'s DAO.
     */
    protected com.demo.entity.order.OrderRowdDao getOrderRowdDao()
    {
        return this.orderRowdDao;
    }

    private com.demo.entity.order.TaskDao taskDao;

    /**
     * Sets the reference to <code>task</code>'s DAO.
     */
    public void setTaskDao(com.demo.entity.order.TaskDao taskDao)
    {
        this.taskDao = taskDao;
    }

    /**
     * Gets the reference to <code>task</code>'s DAO.
     */
    protected com.demo.entity.order.TaskDao getTaskDao()
    {
        return this.taskDao;
    }

    private com.demo.entity.order.TaskFormDao taskFormDao;

    /**
     * Sets the reference to <code>taskForm</code>'s DAO.
     */
    public void setTaskFormDao(com.demo.entity.order.TaskFormDao taskFormDao)
    {
        this.taskFormDao = taskFormDao;
    }

    /**
     * Gets the reference to <code>taskForm</code>'s DAO.
     */
    protected com.demo.entity.order.TaskFormDao getTaskFormDao()
    {
        return this.taskFormDao;
    }

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#createOrderRowTask(com.demo.entity.order.OrderRowTaskVO)
     */
    public long createOrderRowTask(final com.demo.entity.order.OrderRowTaskVO OrderRowTask)
    {
        if (OrderRowTask == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.order.OrderRowTaskManageService.createOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask) - 'OrderRowTask' can not be null");
        }
        try
        {
            return this.handleCreateOrderRowTask(OrderRowTask);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.createOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #createOrderRowTask(com.demo.entity.order.OrderRowTaskVO)}
      */
    protected abstract long handleCreateOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#updateOrderRowTask(com.demo.entity.order.OrderRowTaskVO)
     */
    public void updateOrderRowTask(final com.demo.entity.order.OrderRowTaskVO OrderRowTask)
    {
        if (OrderRowTask == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.order.OrderRowTaskManageService.updateOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask) - 'OrderRowTask' can not be null");
        }
        try
        {
            this.handleUpdateOrderRowTask(OrderRowTask);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.updateOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #updateOrderRowTask(com.demo.entity.order.OrderRowTaskVO)}
      */
    protected abstract void handleUpdateOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#deleteOrderRowTask(long)
     */
    public void deleteOrderRowTask(final long id)
    {
        try
        {
            this.handleDeleteOrderRowTask(id);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.deleteOrderRowTask(long id)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deleteOrderRowTask(long)}
      */
    protected abstract void handleDeleteOrderRowTask(long id)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#getOrderRowTask(com.demo.entity.order.OrderRowTaskVO, int, int, java.lang.String)
     */
    public com.demo.entity.order.OrderRowTaskVO[] getOrderRowTask(final com.demo.entity.order.OrderRowTaskVO OrderRowTask, final int pageNumber, final int pageSize, final java.lang.String orderBy)
    {
        if (OrderRowTask == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.order.OrderRowTaskManageService.getOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask, int pageNumber, int pageSize, java.lang.String orderBy) - 'OrderRowTask' can not be null");
        }
        if (orderBy == null)
        {
            throw new IllegalArgumentException(
                "com.demo.service.order.OrderRowTaskManageService.getOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask, int pageNumber, int pageSize, java.lang.String orderBy) - 'orderBy' can not be null");
        }
        try
        {
            return this.handleGetOrderRowTask(OrderRowTask, pageNumber, pageSize, orderBy);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.getOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask, int pageNumber, int pageSize, java.lang.String orderBy)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getOrderRowTask(com.demo.entity.order.OrderRowTaskVO, int, int, java.lang.String)}
      */
    protected abstract com.demo.entity.order.OrderRowTaskVO[] handleGetOrderRowTask(com.demo.entity.order.OrderRowTaskVO OrderRowTask, int pageNumber, int pageSize, java.lang.String orderBy)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#getOrderRowdByTaskId(long)
     */
    public com.demo.entity.order.OrderRowdVO[] getOrderRowdByTaskId(final long TaskId)
    {
        try
        {
            return this.handleGetOrderRowdByTaskId(TaskId);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.getOrderRowdByTaskId(long TaskId)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getOrderRowdByTaskId(long)}
      */
    protected abstract com.demo.entity.order.OrderRowdVO[] handleGetOrderRowdByTaskId(long TaskId)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#getTaskByOrderRowdId(long)
     */
    public com.demo.entity.order.TaskVO[] getTaskByOrderRowdId(final long OrderRowdId)
    {
        try
        {
            return this.handleGetTaskByOrderRowdId(OrderRowdId);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.getTaskByOrderRowdId(long OrderRowdId)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getTaskByOrderRowdId(long)}
      */
    protected abstract com.demo.entity.order.TaskVO[] handleGetTaskByOrderRowdId(long OrderRowdId)
        throws java.lang.Exception;

    /**
     * @see com.demo.service.order.OrderRowTaskManageService#getTaskFormByOrderRowdId(long)
     */
    public com.demo.entity.order.TaskFormVO[] getTaskFormByOrderRowdId(final long OrderRowdId)
    {
        try
        {
            return this.handleGetTaskFormByOrderRowdId(OrderRowdId);
        }
        catch (Throwable th)
        {
            throw new com.demo.service.order.OrderRowTaskManageServiceException(
                "Error performing 'com.demo.service.order.OrderRowTaskManageService.getTaskFormByOrderRowdId(long OrderRowdId)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getTaskFormByOrderRowdId(long)}
      */
    protected abstract com.demo.entity.order.TaskFormVO[] handleGetTaskFormByOrderRowdId(long OrderRowdId)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.demo.PrincipalStore.get();
    }

    /**
     * Adds an attachment in the webservice's outgoing response message (this only makes sense
     * when the operation this is called within is a web service exposed operation).
     *
     * @param content the actual content to add as the attachment.
     * @param contentType the type of the contents
     * @param dime whether or not DIME should be used (instead of MIME).
     */
    protected void addOutgoingWebServiceAttachment(final Object content, final String contentType, boolean dime)
        throws java.lang.Exception
    {
        com.demo.AttachmentHandler.saveAttachment(content, contentType, dime);
    }

    /**
     * Retrieves any incoming attachments in the webservice's request message (this only makes sense
     * when the operation this is called within is a web service exposed operation).
     */
    protected javax.activation.DataHandler[] getIncomingWebServiceAttachments()
        throws java.lang.Exception
    {
        return com.demo.AttachmentHandler.getAttachments();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.demo.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}