// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package com.demo.entity.order;

/**
 * @see com.demo.entity.order.OrderRowd
 */
public interface OrderRowdDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public final static int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link com.lighthousepmg.plz.domain.messaging.persistence.CommunicationCategory}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param the query results.
     */
    public void toEntities(final java.util.Collection results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link com.demo.entity.order.OrderRowdVO}.
     */
    public final static int TRANSFORM_ORDERROWDVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toOrderRowdVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     */
    public void toOrderRowdVO(
        com.demo.entity.order.OrderRowd source,
        com.demo.entity.order.OrderRowdVO target);


    /**
     * Converts this DAO's entity to an object of type {@link com.demo.entity.order.OrderRowdVO}.
     */
    public com.demo.entity.order.OrderRowdVO toOrderRowdVO(com.demo.entity.order.OrderRowd entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link com.demo.entity.order.OrderRowdVO}.
     */
    public void toOrderRowdVOCollection(java.util.Collection entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link com.demo.entity.order.OrderRowdVO}.
     */
    public com.demo.entity.order.OrderRowdVO[] toOrderRowdVOArray(java.util.Collection entities);

    /**
     * Copies the fields of {@link com.demo.entity.order.OrderRowdVO} to the specified entity.
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void orderRowdVOToEntity(
        com.demo.entity.order.OrderRowdVO source,
        com.demo.entity.order.OrderRowd target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link com.demo.entity.order.OrderRowdVO} to this DAO's entity.
     */
    public com.demo.entity.order.OrderRowd orderRowdVOToEntity(com.demo.entity.order.OrderRowdVO orderRowdVO);

    /**
     * Converts a Collection of instances of type {@link com.demo.entity.order.OrderRowdVO} to this
     * DAO's entity.
     */
    public void orderRowdVOToEntityCollection(java.util.Collection instances);

    /**
     * Loads an instance of com.demo.entity.order.OrderRowd from the persistent store.
     */
    public com.demo.entity.order.OrderRowd load(java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, java.lang.Long id);

    /**
     * Loads all entities of type {@link com.demo.entity.order.OrderRowd}.
     *
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of com.demo.entity.order.OrderRowd and adds it to the persistent store.
     */
    public com.demo.entity.order.OrderRowd create(com.demo.entity.order.OrderRowd orderRowd);

    /**
     * <p>
     * Does the same thing as {@link #create(com.demo.entity.order.OrderRowd)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(int transform, com.demo.entity.order.OrderRowd orderRowd);

    /**
     * Creates a new instance of com.demo.entity.order.OrderRowd and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of com.demo.entity.order.OrderRowd
     * instances to create.
     *
     * @return the created instances.
     */
    public java.util.Collection create(java.util.Collection entities);

    /**
     * <p>
     * Does the same thing as {@link #create(com.demo.entity.order.OrderRowd)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.Collection create(int transform, java.util.Collection entities);

    /**
     * <p>
     * Creates a new <code>com.demo.entity.order.OrderRowd</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     */
    public com.demo.entity.order.OrderRowd create(
        double productNum,
        double unitNum,
        double goodsSuttle,
        double goodsWeight,
        double goodsVolume,
        java.lang.String label,
        double carriage,
        java.lang.String especial,
        java.lang.String goodsState,
        java.lang.String remark);

    /**
     * <p>
     * Does the same thing as {@link #create(double, double, double, double, double, java.lang.String, double, java.lang.String, java.lang.String, java.lang.String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        double productNum,
        double unitNum,
        double goodsSuttle,
        double goodsWeight,
        double goodsVolume,
        java.lang.String label,
        double carriage,
        java.lang.String especial,
        java.lang.String goodsState,
        java.lang.String remark);

    /**
     * <p>
     * Creates a new <code>com.demo.entity.order.OrderRowd</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     */
    public com.demo.entity.order.OrderRowd create(
        double carriage,
        double goodsSuttle,
        double goodsVolume,
        double goodsWeight,
        com.demo.entity.order.Orderd order,
        com.demo.entity.basic.Prod product,
        double productNum,
        double unitNum);

    /**
     * <p>
     * Does the same thing as {@link #create(double, double, double, double, double, double)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        double carriage,
        double goodsSuttle,
        double goodsVolume,
        double goodsWeight,
        com.demo.entity.order.Orderd order,
        com.demo.entity.basic.Prod product,
        double productNum,
        double unitNum);

    /**
     * Updates the <code>orderRowd</code> instance in the persistent store.
     */
    public void update(com.demo.entity.order.OrderRowd orderRowd);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update(java.util.Collection entities);

    /**
     * Removes the instance of com.demo.entity.order.OrderRowd from the persistent store.
     */
    public void remove(com.demo.entity.order.OrderRowd orderRowd);

    /**
     * Removes the instance of com.demo.entity.order.OrderRowd having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove(java.lang.Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     */
    public void remove(java.util.Collection entities);

    /**
     * 
     */
    public java.util.List getOrderRowd(com.demo.entity.order.OrderRowdVO OrderRowd, int pageNumber, int pageSize, java.lang.String orderBy);


    /**
     * Does the same thing as {@link #search(int, com.demo.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link com.demo.PaginationResult} instance.
     */
    public com.demo.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.demo.Search search);

    /**
     * Does the same thing as {@link #search(com.demo.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link com.demo.PaginationResult} instance.
     */
    public com.demo.PaginationResult search(final int pageNumber, final int pageSize, final com.demo.Search search);

    /**
     * Does the same thing as {@link #search(com.demo.Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final int transform, final com.demo.Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final com.demo.Search search);

    // spring-dao merge-point
}