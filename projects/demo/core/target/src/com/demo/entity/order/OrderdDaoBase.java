// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.demo.entity.order;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.demo.entity.order.Orderd</code>.
 * </p>
 *
 * @see com.demo.entity.order.Orderd
 */
public abstract class OrderdDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements com.demo.entity.order.OrderdDao
{

    private com.demo.entity.order.OrderRowdDao orderRowdDao;

    /**
     * Sets the reference to <code>orderRowdDao</code>.
     */
    public void setOrderRowdDao(com.demo.entity.order.OrderRowdDao orderRowdDao)
    {
        this.orderRowdDao = orderRowdDao;
    }

    /**
     * Gets the reference to <code>orderRowdDao</code>.
     */
    protected com.demo.entity.order.OrderRowdDao getOrderRowdDao()
    {
        return this.orderRowdDao;
    }

    private com.demo.entity.basic.CustomerDao customerDao;

    /**
     * Sets the reference to <code>customerDao</code>.
     */
    public void setCustomerDao(com.demo.entity.basic.CustomerDao customerDao)
    {
        this.customerDao = customerDao;
    }

    /**
     * Gets the reference to <code>customerDao</code>.
     */
    protected com.demo.entity.basic.CustomerDao getCustomerDao()
    {
        return this.customerDao;
    }

    /**
     * @see com.demo.entity.order.OrderdDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Orderd.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(com.demo.entity.order.OrderdImpl.class, id);
        return transformEntity(transform, (com.demo.entity.order.Orderd)entity);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#load(java.lang.Long)
     */
    public com.demo.entity.order.Orderd load(java.lang.Long id)
    {
        return (com.demo.entity.order.Orderd)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(com.demo.entity.order.OrderdImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(com.demo.entity.order.Orderd)
     */
    public com.demo.entity.order.Orderd create(com.demo.entity.order.Orderd orderd)
    {
        return (com.demo.entity.order.Orderd)this.create(TRANSFORM_NONE, orderd);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(int transform, com.demo.entity.order.Orderd)
     */
    public java.lang.Object create(final int transform, final com.demo.entity.order.Orderd orderd)
    {
        if (orderd == null)
        {
            throw new IllegalArgumentException(
                "Orderd.create - 'orderd' can not be null");
        }
        this.getHibernateTemplate().save(orderd);
        return this.transformEntity(transform, orderd);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Orderd.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (com.demo.entity.order.Orderd)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String)
     */
    public com.demo.entity.order.Orderd create(
        java.lang.String customerOrderNo,
        java.lang.String contractNo,
        java.lang.String conveyanceEnum,
        java.lang.String carryTypeEnum,
        java.lang.String shipperRemark,
        java.lang.String carrierRemark,
        java.lang.String levelEnum,
        java.lang.String customerTypeEnum,
        java.util.Date referTime,
        java.lang.String linkMan,
        java.lang.String tel,
        java.util.Date bookTime,
        java.util.Date completeTime,
        java.lang.String remark)
    {
        return (com.demo.entity.order.Orderd)this.create(TRANSFORM_NONE, customerOrderNo, contractNo, conveyanceEnum, carryTypeEnum, shipperRemark, carrierRemark, levelEnum, customerTypeEnum, referTime, linkMan, tel, bookTime, completeTime, remark);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Date, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String customerOrderNo,
        java.lang.String contractNo,
        java.lang.String conveyanceEnum,
        java.lang.String carryTypeEnum,
        java.lang.String shipperRemark,
        java.lang.String carrierRemark,
        java.lang.String levelEnum,
        java.lang.String customerTypeEnum,
        java.util.Date referTime,
        java.lang.String linkMan,
        java.lang.String tel,
        java.util.Date bookTime,
        java.util.Date completeTime,
        java.lang.String remark)
    {
        com.demo.entity.order.Orderd entity = new com.demo.entity.order.OrderdImpl();
        entity.setCustomerOrderNo(customerOrderNo);
        entity.setContractNo(contractNo);
        entity.setConveyanceEnum(conveyanceEnum);
        entity.setCarryTypeEnum(carryTypeEnum);
        entity.setShipperRemark(shipperRemark);
        entity.setCarrierRemark(carrierRemark);
        entity.setLevelEnum(levelEnum);
        entity.setCustomerTypeEnum(customerTypeEnum);
        entity.setReferTime(referTime);
        entity.setLinkMan(linkMan);
        entity.setTel(tel);
        entity.setBookTime(bookTime);
        entity.setCompleteTime(completeTime);
        entity.setRemark(remark);
        return this.create(transform, entity);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(java.util.Date, java.lang.String, com.demo.entity.basic.Customer)
     */
    public com.demo.entity.order.Orderd create(
        java.util.Date bookTime,
        java.lang.String conveyanceEnum,
        com.demo.entity.basic.Customer customer)
    {
        return (com.demo.entity.order.Orderd)this.create(TRANSFORM_NONE, bookTime, conveyanceEnum, customer);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#create(int, java.util.Date, java.lang.String, com.demo.entity.basic.Customer)
     */
    public java.lang.Object create(
        final int transform,
        java.util.Date bookTime,
        java.lang.String conveyanceEnum,
        com.demo.entity.basic.Customer customer)
    {
        com.demo.entity.order.Orderd entity = new com.demo.entity.order.OrderdImpl();
        entity.setBookTime(bookTime);
        entity.setConveyanceEnum(conveyanceEnum);
        entity.setCustomer(customer);
        return this.create(transform, entity);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#update(com.demo.entity.order.Orderd)
     */
    public void update(com.demo.entity.order.Orderd orderd)
    {
        if (orderd == null)
        {
            throw new IllegalArgumentException(
                "Orderd.update - 'orderd' can not be null");
        }
        this.getHibernateTemplate().update(orderd);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Orderd.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((com.demo.entity.order.Orderd)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#remove(com.demo.entity.order.Orderd)
     */
    public void remove(com.demo.entity.order.Orderd orderd)
    {
        if (orderd == null)
        {
            throw new IllegalArgumentException(
                "Orderd.remove - 'orderd' can not be null");
        }
        this.getHibernateTemplate().delete(orderd);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Orderd.remove - 'id' can not be null");
        }
        com.demo.entity.order.Orderd entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see com.demo.entity.order.OrderdDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Orderd.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see com.demo.entity.order.OrderdDao#getOrderd(com.demo.entity.order.OrderdVO, int, int, java.lang.String)
     */
    public java.util.List getOrderd(final com.demo.entity.order.OrderdVO Orderd, final int pageNumber, final int pageSize, final java.lang.String orderBy)
    {
        if (Orderd == null)
        {
            throw new IllegalArgumentException(
                "com.demo.entity.order.OrderdDao.getOrderd(com.demo.entity.order.OrderdVO Orderd, int pageNumber, int pageSize, java.lang.String orderBy) - 'Orderd' can not be null");
        }
        if (orderBy == null)
        {
            throw new IllegalArgumentException(
                "com.demo.entity.order.OrderdDao.getOrderd(com.demo.entity.order.OrderdVO Orderd, int pageNumber, int pageSize, java.lang.String orderBy) - 'orderBy' can not be null");
        }
        try
        {
            return this.handleGetOrderd(Orderd, pageNumber, pageSize, orderBy);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.demo.entity.order.OrderdDao.getOrderd(com.demo.entity.order.OrderdVO Orderd, int pageNumber, int pageSize, java.lang.String orderBy)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #getOrderd(com.demo.entity.order.OrderdVO, int, int, java.lang.String)}
      */
    protected abstract java.util.List handleGetOrderd(com.demo.entity.order.OrderdVO Orderd, int pageNumber, int pageSize, java.lang.String orderBy)
        throws java.lang.Exception;

    /**
     * @see com.demo.entity.order.OrderdDao#deleteOrderd(long)
     */
    public void deleteOrderd(final long id)
    {
        try
        {
            this.handleDeleteOrderd(id);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.demo.entity.order.OrderdDao.deleteOrderd(long id)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #deleteOrderd(long)}
      */
    protected abstract void handleDeleteOrderd(long id)
        throws java.lang.Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>com.demo.entity.order.OrderdDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link com.demo.entity.order.Orderd} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link com.demo.entity.order.OrderdVO} - {@link TRANSFORM_ORDERDVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link com.demo.entity.order.OrderdDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final com.demo.entity.order.Orderd entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_ORDERDVO :
                    target = toOrderdVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,com.demo.entity.order.Orderd)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>com.demo.entity.order.OrderdDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,com.demo.entity.order.Orderd)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_ORDERDVO :
                toOrderdVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see com.demo.entity.order.OrderdDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link com.demo.entity.order.Orderd}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof com.demo.entity.order.Orderd)
                {
                    result = input;
                }
                return result;
            }
        };

    protected com.demo.entity.order.Orderd toEntity(java.lang.Object[] row)
    {
        com.demo.entity.order.Orderd target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof com.demo.entity.order.Orderd)
                {
                    target = (com.demo.entity.order.Orderd)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see com.demo.entity.order.OrderdDao#toOrderdVOCollection(java.util.Collection)
     */
    public final void toOrderdVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, ORDERDVO_TRANSFORMER);
        }
    }

    /**
     * @see com.demo.entity.order.OrderdDao#toOrderdVOArray(java.util.Collection)
     */
    public final com.demo.entity.order.OrderdVO[] toOrderdVOArray(java.util.Collection entities)
    {
        com.demo.entity.order.OrderdVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toOrderdVOCollection(collection);
            result = (com.demo.entity.order.OrderdVO[]) collection.toArray(new com.demo.entity.order.OrderdVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link OrderdDaoImpl} class if you intend to use reporting queries.
     * @see com.demo.entity.order.OrderdDao#toOrderdVO(com.demo.entity.order.Orderd)
     */
    protected com.demo.entity.order.OrderdVO toOrderdVO(java.lang.Object[] row)
    {
        return this.toOrderdVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link com.demo.entity.order.OrderdVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ORDERDVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof com.demo.entity.order.Orderd)
                {
                    result = toOrderdVO((com.demo.entity.order.Orderd)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toOrderdVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see com.demo.entity.order.OrderdDao#orderdVOToEntityCollection(java.util.Collection)
     */
    public final void orderdVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof com.demo.entity.order.OrderdVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, OrderdVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer OrderdVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return orderdVOToEntity((com.demo.entity.order.OrderdVO)input);
            }
        };


    /**
     * @see com.demo.entity.order.OrderdDao#toOrderdVO(com.demo.entity.order.Orderd, com.demo.entity.order.OrderdVO)
     */
    public void toOrderdVO(
        com.demo.entity.order.Orderd source,
        com.demo.entity.order.OrderdVO target)
    {
        target.setCustomerOrderNo(source.getCustomerOrderNo());
        target.setContractNo(source.getContractNo());
        target.setConveyanceEnum(source.getConveyanceEnum());
        target.setCarryTypeEnum(source.getCarryTypeEnum());
        target.setShipperRemark(source.getShipperRemark());
        target.setCarrierRemark(source.getCarrierRemark());
        target.setLevelEnum(source.getLevelEnum());
        target.setCustomerTypeEnum(source.getCustomerTypeEnum());
        // No conversion for target.referTime (can't convert source.getReferTime():java.util.Date to com.demo.entity.basic.DateTimeQuery)
        target.setLinkMan(source.getLinkMan());
        target.setTel(source.getTel());
        // No conversion for target.bookTime (can't convert source.getBookTime():java.util.Date to com.demo.entity.basic.DateTimeQuery)
        // No conversion for target.completeTime (can't convert source.getCompleteTime():java.util.Date to com.demo.entity.basic.DateTimeQuery)
        target.setRemark(source.getRemark());
        target.setId((source.getId() == null ? 0 : source.getId().longValue()));
        // No conversion for target.orderRow (can't convert source.getOrderRow():com.demo.entity.order.OrderRowd to com.demo.entity.order.OrderRowdVO[])
        // No conversion for target.customer (can't convert source.getCustomer():com.demo.entity.basic.Customer to com.demo.entity.basic.CustomerVO)
    }

    /**
     * @see com.demo.entity.order.OrderdDao#toOrderdVO(com.demo.entity.order.Orderd)
     */
    public com.demo.entity.order.OrderdVO toOrderdVO(final com.demo.entity.order.Orderd entity)
    {
        com.demo.entity.order.OrderdVO target = null;
        if (entity != null)
        {
            target = new com.demo.entity.order.OrderdVO();
            this.toOrderdVO(entity, target);
        }
        return target;
    }

    /**
     * @see com.demo.entity.order.OrderdDao#orderdVOToEntity(com.demo.entity.order.OrderdVO, com.demo.entity.order.Orderd)
     */
    public void orderdVOToEntity(
        com.demo.entity.order.OrderdVO source,
        com.demo.entity.order.Orderd target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getCustomerOrderNo() != null)
        {
            target.setCustomerOrderNo(source.getCustomerOrderNo());
        }
        if (copyIfNull || source.getContractNo() != null)
        {
            target.setContractNo(source.getContractNo());
        }
        if (copyIfNull || source.getConveyanceEnum() != null)
        {
            target.setConveyanceEnum(source.getConveyanceEnum());
        }
        if (copyIfNull || source.getCarryTypeEnum() != null)
        {
            target.setCarryTypeEnum(source.getCarryTypeEnum());
        }
        if (copyIfNull || source.getShipperRemark() != null)
        {
            target.setShipperRemark(source.getShipperRemark());
        }
        if (copyIfNull || source.getCarrierRemark() != null)
        {
            target.setCarrierRemark(source.getCarrierRemark());
        }
        if (copyIfNull || source.getLevelEnum() != null)
        {
            target.setLevelEnum(source.getLevelEnum());
        }
        if (copyIfNull || source.getCustomerTypeEnum() != null)
        {
            target.setCustomerTypeEnum(source.getCustomerTypeEnum());
        }
        // No conversion for target.referTime (can't convert source.getReferTime():com.demo.entity.basic.DateTimeQuery to java.util.Date)
        if (copyIfNull || source.getLinkMan() != null)
        {
            target.setLinkMan(source.getLinkMan());
        }
        if (copyIfNull || source.getTel() != null)
        {
            target.setTel(source.getTel());
        }
        // No conversion for target.bookTime (can't convert source.getBookTime():com.demo.entity.basic.DateTimeQuery to java.util.Date)
        // No conversion for target.completeTime (can't convert source.getCompleteTime():com.demo.entity.basic.DateTimeQuery to java.util.Date)
        if (copyIfNull || source.getRemark() != null)
        {
            target.setRemark(source.getRemark());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.demo.PrincipalStore.get();
    }

    /**
     * @see com.demo.entity.order.OrderdDao#search(int, int, int, com.demo.Search)
     */
    public com.demo.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.demo.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final com.demo.PropertySearch propertySearch = new com.demo.PropertySearch(
                this.getSession(false), com.demo.entity.order.OrderdImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new com.demo.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.demo.entity.order.OrderdDao#search(int, int, com.demo.Search)
     */
    public com.demo.PaginationResult search(final int pageNumber, final int pageSize, final com.demo.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see com.demo.entity.order.OrderdDao#search(int, com.demo.Search)
     */
    public java.util.Set search(final int transform, final com.demo.Search search)
    {
        try
        {
            final com.demo.PropertySearch propertySearch = new com.demo.PropertySearch(
                this.getSession(false), com.demo.entity.order.OrderdImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.demo.entity.order.OrderdDao#search(com.demo.Search)
     */
    public java.util.Set search(final com.demo.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}