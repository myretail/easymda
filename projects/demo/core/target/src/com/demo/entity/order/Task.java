// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package com.demo.entity.order;

/**
 * 
 */
public abstract class Task
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 847212071770356230L;

    private double num;

    /**
     * 
     */
    public double getNum()
    {
        return this.num;
    }

    public void setNum(double num)
    {
        this.num = num;
    }

    private double volumne;

    /**
     * 
     */
    public double getVolumne()
    {
        return this.volumne;
    }

    public void setVolumne(double volumne)
    {
        this.volumne = volumne;
    }

    private java.lang.String remark;

    /**
     * 
     */
    public java.lang.String getRemark()
    {
        return this.remark;
    }

    public void setRemark(java.lang.String remark)
    {
        this.remark = remark;
    }

    private java.lang.Long id;

    /**
     * 
     */
    public java.lang.Long getId()
    {
        return this.id;
    }

    public void setId(java.lang.Long id)
    {
        this.id = id;
    }

    private com.demo.entity.order.TaskForm taskForm;

    /**
     * 
     */
    public com.demo.entity.order.TaskForm getTaskForm()
    {
        return this.taskForm;
    }

    public void setTaskForm(com.demo.entity.order.TaskForm taskForm)
    {
        this.taskForm = taskForm;
    }

    /**
     * Returns <code>true</code> if the argument is an Task instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Task))
        {
            return false;
        }
        final Task that = (Task)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (id == null ? 0 : id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link com.demo.entity.order.Task}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link com.demo.entity.order.Task}.
         */
        public static com.demo.entity.order.Task newInstance()
        {
            return new com.demo.entity.order.TaskImpl();
        }

        /**
         * Constructs a new instance of {@link com.demo.entity.order.Task}, taking all required and/or
         * read-only properties as arguments.
         */
        public static com.demo.entity.order.Task newInstance(double num, double volumne, com.demo.entity.order.TaskForm taskForm)
        {
            final com.demo.entity.order.Task entity = new com.demo.entity.order.TaskImpl();
            entity.setNum(num);
            entity.setVolumne(volumne);
            entity.setTaskForm(taskForm);
            return entity;
        }

        /**
         * Constructs a new instance of {@link com.demo.entity.order.Task}, taking all possible properties
         * (except the identifier(s))as arguments.
         */
        public static com.demo.entity.order.Task newInstance(double num, double volumne, java.lang.String remark, com.demo.entity.order.TaskForm taskForm)
        {
            final com.demo.entity.order.Task entity = new com.demo.entity.order.TaskImpl();
            entity.setNum(num);
            entity.setVolumne(volumne);
            entity.setRemark(remark);
            entity.setTaskForm(taskForm);
            return entity;
        }
    }
    
// HibernateEntity.vsl merge-point
}