// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.demo.entity.order;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.demo.entity.order.TaskForm</code>.
 * </p>
 *
 * @see com.demo.entity.order.TaskForm
 */
public abstract class TaskFormDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements com.demo.entity.order.TaskFormDao
{

    private com.demo.entity.order.TaskDao taskDao;

    /**
     * Sets the reference to <code>taskDao</code>.
     */
    public void setTaskDao(com.demo.entity.order.TaskDao taskDao)
    {
        this.taskDao = taskDao;
    }

    /**
     * Gets the reference to <code>taskDao</code>.
     */
    protected com.demo.entity.order.TaskDao getTaskDao()
    {
        return this.taskDao;
    }

    private com.demo.entity.order.carDao carDao;

    /**
     * Sets the reference to <code>carDao</code>.
     */
    public void setCarDao(com.demo.entity.order.carDao carDao)
    {
        this.carDao = carDao;
    }

    /**
     * Gets the reference to <code>carDao</code>.
     */
    protected com.demo.entity.order.carDao getCarDao()
    {
        return this.carDao;
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(com.demo.entity.order.TaskFormImpl.class, id);
        return transformEntity(transform, (com.demo.entity.order.TaskForm)entity);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#load(java.lang.Long)
     */
    public com.demo.entity.order.TaskForm load(java.lang.Long id)
    {
        return (com.demo.entity.order.TaskForm)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(com.demo.entity.order.TaskFormImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(com.demo.entity.order.TaskForm)
     */
    public com.demo.entity.order.TaskForm create(com.demo.entity.order.TaskForm taskForm)
    {
        return (com.demo.entity.order.TaskForm)this.create(TRANSFORM_NONE, taskForm);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(int transform, com.demo.entity.order.TaskForm)
     */
    public java.lang.Object create(final int transform, final com.demo.entity.order.TaskForm taskForm)
    {
        if (taskForm == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.create - 'taskForm' can not be null");
        }
        this.getHibernateTemplate().save(taskForm);
        return this.transformEntity(transform, taskForm);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (com.demo.entity.order.TaskForm)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(java.util.Date, java.lang.String, java.lang.String)
     */
    public com.demo.entity.order.TaskForm create(
        java.util.Date setDate,
        java.lang.String formState,
        java.lang.String remark)
    {
        return (com.demo.entity.order.TaskForm)this.create(TRANSFORM_NONE, setDate, formState, remark);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(int, java.util.Date, java.lang.String, java.lang.String)
     */
    public java.lang.Object create(
        final int transform,
        java.util.Date setDate,
        java.lang.String formState,
        java.lang.String remark)
    {
        com.demo.entity.order.TaskForm entity = new com.demo.entity.order.TaskFormImpl();
        entity.setSetDate(setDate);
        entity.setFormState(formState);
        entity.setRemark(remark);
        return this.create(transform, entity);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(com.demo.entity.order.car, java.lang.String, java.util.Date)
     */
    public com.demo.entity.order.TaskForm create(
        com.demo.entity.order.car car,
        java.lang.String formState,
        java.util.Date setDate)
    {
        return (com.demo.entity.order.TaskForm)this.create(TRANSFORM_NONE, car, formState, setDate);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#create(int, com.demo.entity.order.car, java.lang.String, java.util.Date)
     */
    public java.lang.Object create(
        final int transform,
        com.demo.entity.order.car car,
        java.lang.String formState,
        java.util.Date setDate)
    {
        com.demo.entity.order.TaskForm entity = new com.demo.entity.order.TaskFormImpl();
        entity.setCar(car);
        entity.setFormState(formState);
        entity.setSetDate(setDate);
        return this.create(transform, entity);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#update(com.demo.entity.order.TaskForm)
     */
    public void update(com.demo.entity.order.TaskForm taskForm)
    {
        if (taskForm == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.update - 'taskForm' can not be null");
        }
        this.getHibernateTemplate().update(taskForm);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((com.demo.entity.order.TaskForm)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#remove(com.demo.entity.order.TaskForm)
     */
    public void remove(com.demo.entity.order.TaskForm taskForm)
    {
        if (taskForm == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.remove - 'taskForm' can not be null");
        }
        this.getHibernateTemplate().delete(taskForm);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.remove - 'id' can not be null");
        }
        com.demo.entity.order.TaskForm entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "TaskForm.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see com.demo.entity.order.TaskFormDao#getTaskForm(com.demo.entity.order.TaskFormVO, int, int, java.lang.String)
     */
    public java.util.List getTaskForm(final com.demo.entity.order.TaskFormVO TaskForm, final int pageNumber, final int pageSize, final java.lang.String orderBy)
    {
        if (TaskForm == null)
        {
            throw new IllegalArgumentException(
                "com.demo.entity.order.TaskFormDao.getTaskForm(com.demo.entity.order.TaskFormVO TaskForm, int pageNumber, int pageSize, java.lang.String orderBy) - 'TaskForm' can not be null");
        }
        if (orderBy == null)
        {
            throw new IllegalArgumentException(
                "com.demo.entity.order.TaskFormDao.getTaskForm(com.demo.entity.order.TaskFormVO TaskForm, int pageNumber, int pageSize, java.lang.String orderBy) - 'orderBy' can not be null");
        }
        try
        {
            return this.handleGetTaskForm(TaskForm, pageNumber, pageSize, orderBy);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.demo.entity.order.TaskFormDao.getTaskForm(com.demo.entity.order.TaskFormVO TaskForm, int pageNumber, int pageSize, java.lang.String orderBy)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #getTaskForm(com.demo.entity.order.TaskFormVO, int, int, java.lang.String)}
      */
    protected abstract java.util.List handleGetTaskForm(com.demo.entity.order.TaskFormVO TaskForm, int pageNumber, int pageSize, java.lang.String orderBy)
        throws java.lang.Exception;

    /**
     * @see com.demo.entity.order.TaskFormDao#deleteTaskForm(long)
     */
    public void deleteTaskForm(final long id)
    {
        try
        {
            this.handleDeleteTaskForm(id);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.demo.entity.order.TaskFormDao.deleteTaskForm(long id)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #deleteTaskForm(long)}
      */
    protected abstract void handleDeleteTaskForm(long id)
        throws java.lang.Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>com.demo.entity.order.TaskFormDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link com.demo.entity.order.TaskForm} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link com.demo.entity.order.TaskFormVO} - {@link TRANSFORM_TASKFORMVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link com.demo.entity.order.TaskFormDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final com.demo.entity.order.TaskForm entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_TASKFORMVO :
                    target = toTaskFormVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,com.demo.entity.order.TaskForm)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>com.demo.entity.order.TaskFormDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,com.demo.entity.order.TaskForm)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_TASKFORMVO :
                toTaskFormVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link com.demo.entity.order.TaskForm}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof com.demo.entity.order.TaskForm)
                {
                    result = input;
                }
                return result;
            }
        };

    protected com.demo.entity.order.TaskForm toEntity(java.lang.Object[] row)
    {
        com.demo.entity.order.TaskForm target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof com.demo.entity.order.TaskForm)
                {
                    target = (com.demo.entity.order.TaskForm)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#toTaskFormVOCollection(java.util.Collection)
     */
    public final void toTaskFormVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, TASKFORMVO_TRANSFORMER);
        }
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#toTaskFormVOArray(java.util.Collection)
     */
    public final com.demo.entity.order.TaskFormVO[] toTaskFormVOArray(java.util.Collection entities)
    {
        com.demo.entity.order.TaskFormVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toTaskFormVOCollection(collection);
            result = (com.demo.entity.order.TaskFormVO[]) collection.toArray(new com.demo.entity.order.TaskFormVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link TaskFormDaoImpl} class if you intend to use reporting queries.
     * @see com.demo.entity.order.TaskFormDao#toTaskFormVO(com.demo.entity.order.TaskForm)
     */
    protected com.demo.entity.order.TaskFormVO toTaskFormVO(java.lang.Object[] row)
    {
        return this.toTaskFormVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link com.demo.entity.order.TaskFormVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer TASKFORMVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof com.demo.entity.order.TaskForm)
                {
                    result = toTaskFormVO((com.demo.entity.order.TaskForm)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toTaskFormVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see com.demo.entity.order.TaskFormDao#taskFormVOToEntityCollection(java.util.Collection)
     */
    public final void taskFormVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof com.demo.entity.order.TaskFormVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, TaskFormVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer TaskFormVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return taskFormVOToEntity((com.demo.entity.order.TaskFormVO)input);
            }
        };


    /**
     * @see com.demo.entity.order.TaskFormDao#toTaskFormVO(com.demo.entity.order.TaskForm, com.demo.entity.order.TaskFormVO)
     */
    public void toTaskFormVO(
        com.demo.entity.order.TaskForm source,
        com.demo.entity.order.TaskFormVO target)
    {
        // No conversion for target.setDate (can't convert source.getSetDate():java.util.Date to com.demo.entity.basic.DateTimeQuery)
        target.setFormState(source.getFormState());
        target.setRemark(source.getRemark());
        target.setId((source.getId() == null ? 0 : source.getId().longValue()));
        // No conversion for target.tasks (can't convert source.getTasks():com.demo.entity.order.Task to com.demo.entity.order.TaskVO[])
        // No conversion for target.car (can't convert source.getCar():com.demo.entity.order.car to com.demo.entity.order.carVO)
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#toTaskFormVO(com.demo.entity.order.TaskForm)
     */
    public com.demo.entity.order.TaskFormVO toTaskFormVO(final com.demo.entity.order.TaskForm entity)
    {
        com.demo.entity.order.TaskFormVO target = null;
        if (entity != null)
        {
            target = new com.demo.entity.order.TaskFormVO();
            this.toTaskFormVO(entity, target);
        }
        return target;
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#taskFormVOToEntity(com.demo.entity.order.TaskFormVO, com.demo.entity.order.TaskForm)
     */
    public void taskFormVOToEntity(
        com.demo.entity.order.TaskFormVO source,
        com.demo.entity.order.TaskForm target,
        boolean copyIfNull)
    {
        // No conversion for target.setDate (can't convert source.getSetDate():com.demo.entity.basic.DateTimeQuery to java.util.Date)
        if (copyIfNull || source.getFormState() != null)
        {
            target.setFormState(source.getFormState());
        }
        if (copyIfNull || source.getRemark() != null)
        {
            target.setRemark(source.getRemark());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.demo.PrincipalStore.get();
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#search(int, int, int, com.demo.Search)
     */
    public com.demo.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.demo.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final com.demo.PropertySearch propertySearch = new com.demo.PropertySearch(
                this.getSession(false), com.demo.entity.order.TaskFormImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new com.demo.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#search(int, int, com.demo.Search)
     */
    public com.demo.PaginationResult search(final int pageNumber, final int pageSize, final com.demo.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#search(int, com.demo.Search)
     */
    public java.util.Set search(final int transform, final com.demo.Search search)
    {
        try
        {
            final com.demo.PropertySearch propertySearch = new com.demo.PropertySearch(
                this.getSession(false), com.demo.entity.order.TaskFormImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.demo.entity.order.TaskFormDao#search(com.demo.Search)
     */
    public java.util.Set search(final com.demo.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}