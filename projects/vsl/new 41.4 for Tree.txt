#set ($ifcon= 0)
#foreach($member in $manageable.manageableAttributes)
	#if ($member.name != ${manageable.manageableIdentifier.name})
		#set ($ifcon= 1)
	#end
#end		
#if($ifcon == 0)
//---end---------判断是否为多对多的关系表

	#set ($allMenber= 1)
	#set ($firstMenber= '')
	#set ($lastMenber= '')
	#foreach($memberAs in $manageable.manageableAssociationEnds)
		#if(!${memberAs.many})   
			#if($allMenber== 1)
				#set ($lastMenber= $memberAs)
			#elseif($allMenber== 2)
				#set ($firstMenber= $memberAs)
			#end
			#set($allMenber= $allMenber + 1)
		#end
	#end
	//----------lastMenber = $lastMenber   firstMenber=$firstMenber
	//${lastMenber.association.name}AFTab.js	
	#set ($associationname= ${lastMenber.association.name})
		  var NU${lastMenber.association.name} = false;//needUpdate
		  var url${firstMenber.association.name} = getUrl()+ "services/${manageable.name}ManageService";
		  var deletedata${firstMenber.association.name} =   ",";
		  var adddata${firstMenber.association.name} =    ",";
		  var querydata${firstMenber.association.name} =  new Array();
		  var pagenumber${firstMenber.association.name}=1;
		  var totalCount${firstMenber.association.name}=0;
		  var pagesize${firstMenber.association.name}=10;
		  var orderBy${firstMenber.association.name}='0';
		  var queryvo${firstMenber.association.name}=new ${manageable.name}VOJs();
		  var oddstyle='';
		  var model${firstMenber.association.name} = new dojox.grid.data.Table(null, querydata${firstMenber.association.name});
		  var grid${lastMenber.association.name};

	var getVO${firstMenber.association.name}${firstMenber.type.name}=function(id){

			var pu = new SOAPClientParameters2();
			pu.add('${lastMenber.name}Id',id) ;
			pu.add('parentId',0) ;
			SOAPClient.invoke(url${firstMenber.association.name},"get${firstMenber.type.name}By${lastMenber.type.name}AndParentId", pu, false,  function GetEnu_callBack(ul, soapResponse){      
			 querydata${firstMenber.association.name}${firstMenber.type.name}=${firstMenber.type.name}VOtoArray_fun(ul,false);
			 totalCount${firstMenber.association.name}=ul[ul.length-1]["ns:id"]; 
			 querydata${firstMenber.association.name}${firstMenber.type.name}.splice(querydata${firstMenber.association.name}${firstMenber.type.name}.length-1,1);
			}); 
			model${firstMenber.association.name}.setData(querydata${firstMenber.association.name}${firstMenber.type.name});
			
	/*var totalpage=Math.ceil(new Number(totalCount${firstMenber.association.name})/pagesize${firstMenber.association.name});
		
		if(totalpage>1){
			if(pagenumber${firstMenber.association.name}==1){
				dijit.byId("but6${lastMenber.association.name}").setDisabled(true);
				dijit.byId("but7${lastMenber.association.name}").setDisabled(false);
			}else if(pagenumber${lastMenber.association.name}==totalpage){
				dijit.byId("but6${lastMenber.association.name}").setDisabled(false);
				dijit.byId("but7${lastMenber.association.name}").setDisabled(true);
			}else{
				dijit.byId("but6${lastMenber.association.name}").setDisabled(false);
				dijit.byId("but7${lastMenber.association.name}").setDisabled(false);
			}
		}else{
			dijit.byId("but6${lastMenber.association.name}").setDisabled(true);
			dijit.byId("but7${lastMenber.association.name}").setDisabled(true);
		
		}
		if(pagesize${firstMenber.association.name}==0){
			totalpage=1;
			dijit.byId("but6${lastMenber.association.name}").setDisabled(true);
			dijit.byId("but7${lastMenber.association.name}").setDisabled(true);
		}
		if(totalpage==1)pagenumber${firstMenber.association.name}=1;
		
		 document.getElementById("rowCount${lastMenber.association.name}").innerHTML=i18nStr.di+" "+pagenumber${firstMenber.association.name}+" "+i18nStr.page+" / "+i18nStr.totle+" "+totalpage+" "+i18nStr.page+" / "+i18nStr.sum+" "+totalCount${firstMenber.association.name}+" "+i18nStr.rowSize; 	
	*/
	}
	  

	
	function save${lastMenber.association.name}(){
		var delArray=deletedata${firstMenber.association.name}.split(",");
		for(var i=1;i<delArray.length-1;i++){
			var pdel = new SOAPClientParameters();  
			pdel.add('id',delArray[i]);
				SOAPClient.invoke(url${firstMenber.association.name}, "delete${manageable.name}", pdel, false,  function GetEnu_callBack(ul, soapResponse){
			});
		}
		deletedata${firstMenber.association.name}=",";
		
		var addArray=adddata${firstMenber.association.name}.split(",");
					  
		for(var i=1;i<addArray.length-1;i++){
			var vobject=new ${manageable.name}VOJs();
			var ${lastMenber.type.name}vo=new ${lastMenber.type.name}VOJs();
			${lastMenber.type.name}vo.id=mainID;
			vobject.${lastMenber.name}=${lastMenber.type.name}vo;
			var ${firstMenber.type.name}vo=new ${firstMenber.type.name}VOJs();
			${firstMenber.type.name}vo.id=addArray[i];
			vobject.${firstMenber.name}=${firstMenber.type.name}vo;
			var padd = new SOAPClientParameters2(); 
			padd.add('${manageable.name}VO',vobject);
			SOAPClient.invoke(url${firstMenber.association.name}, "create${manageable.name}", padd, false,  function GetEnu_callBack(ul, soapResponse){
				var node = _tree._itemNodeMap[addArray[i]];
				popStore.setValue(node.item,"selectIf",ul); 
			});
		}
		
		adddata${firstMenber.association.name}=",";
		
	}
	
	var _tree;
	var queryvo${firstMenber.name}=new ${firstMenber.type.name}VOJs();
	
	var build${lastMenber.association.name}=function(){
	
		if(NU${lastMenber.association.name} && mainID!=undefined && mainID!=''){
		
			if(grid${lastMenber.association.name}==undefined){
				_tree = new dijit.Tree({
				id: "tree",
				getIconClass:selIconClass,
				model: myModel//,
				//dndController: "dijit._tree.dndSource" 
			});
			dojo.byId("grid${lastMenber.association.name}").appendChild(_tree.domNode);
			_tree.startup();
				
				
				getTreeNodes(1,"___",null,0,1);
				expandAllChildrenNode(_tree,_tree.rootNode,0,1);
	 
				 dojo.connect(dijit.byId("grid${lastMenber.association.name}"), "_onExpandoClick", function(message){
							   // _expandNode
							   var node = message.node;
							   var ch2node=node.getChildren();
							   for (var i=0; i<ch2node.length; i++){	
							   //alert(ch2node.length);
							   if(ch2node[i].getChildren().length==0&&ch2node[i].item.haveChild=="0"){
								 var ch2item =ch2node[i].item;
								 getTreeNodes(ch2item.eId,1,ch2item,0,1);
							   }}
				});   
			  
				//查询列表----begin
				 dojo.connect(_tree, "onClick", function(item,node){
				 /*alert("Execute of node " + continentStore.getLabel(item)
				+", population=" + continentStore.getValue(item, "population"));*/
					changeIconClass(item,node);
					if(item.selectIf==undefined){
						var idStr=","+item.eId+",";
					
						if(adddata${firstMenber.association.name}.indexOf(idStr)==-1){
							adddata${firstMenber.association.name}=adddata${firstMenber.association.name}+item.eId+",";
						}else{
							adddata${firstMenber.association.name}=adddata${firstMenber.association.name}.substring(0,adddata${firstMenber.association.name}.indexOf(idStr))+adddata${firstMenber.association.name}.substring(adddata${firstMenber.association.name}.indexOf(idStr)+idStr.length-1);
						}
					}else{
						var idStr=","+item.selectIf+",";
						if(deletedata${firstMenber.association.name}.indexOf(idStr)==-1){
							deletedata${firstMenber.association.name}=deletedata${firstMenber.association.name}+item.selectIf+",";
						}else{
							deletedata${firstMenber.association.name}=deletedata${firstMenber.association.name}.substring(0,deletedata${firstMenber.association.name}.indexOf(idStr))+deletedata${firstMenber.association.name}.substring(deletedata${firstMenber.association.name}.indexOf(idStr)+idStr.length-1);
						}
					}
				}); 
			}
			NU${lastMenber.association.name}=false;
		}
	}
	
	/*function pageSizeChange${lastMenber.association.name}(mylabel){
			pagesize${lastMenber.association.name}=mylabel;
			getVO${lastMenber.association.name}${manageable.name}(queryvo${lastMenber.association.name}${manageable.name});
		}

		function allpage${lastMenber.association.name}(){
			pagesize${lastMenber.association.name}=0;
			getVO${lastMenber.association.name}${manageable.name}(queryvo${lastMenber.association.name}${manageable.name});
		}*/

		function upPage${lastMenber.association.name}(){
			pagenumber${lastMenber.association.name}--;
			getVO${lastMenber.association.name}${manageable.name}(queryvo${lastMenber.association.name}${manageable.name});
		}
		function downPage${lastMenber.association.name}(){
			pagenumber${lastMenber.association.name}++;
			getVO${lastMenber.association.name}${manageable.name}(queryvo${lastMenber.association.name}${manageable.name});
		}
	
	var selIconClass= function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary: user overridable function to return CSS class name to display icon
		//return (!item || this.model.mayHaveChildren(item)) ? (opened ? "dijitFolderOpened" : "dijitFolderClosed") : "dijitLeaf"
		//console.log("item.selectIf:"+item.selectIf);
		//for(var t in item){console.log(t+":"+item[t]);}
		return (!item.root)?((item.selectIf==undefined) ? "dijitUnSelected" : "dijitSelected"): (opened ? "dijitFolderOpened" : "dijitFolderClosed") ;
	}
	
	var changeIconClass= function(/*dojo.data.Item*/ item,node){
		// summary: user overridable function to return CSS class name to display icon
		//return (!item || this.model.mayHaveChildren(item)) ? (opened ? "dijitFolderOpened" : "dijitFolderClosed") : "dijitLeaf"
		//console.log("item.item._iconClass:"+item.iconNode.class  );
		//console.log("itemnode._iconClass:"+node.iconNode.class);
		//for(var t in node.iconNode){console.log(t+":"+node.iconNode[t]);}
		//for(var t in item.iconNode){console.log(t+"::::"+item.iconNode[t]);}
		var classNameTemp=node.iconNode.className;
		if(classNameTemp.indexOf("dijitSelected")==-1){
		// "dijitUnSelected" : "dijitSelected";
			node.iconNode.className=classNameTemp.replace("dijitUnSelected","dijitSelected");
		}else{
			node.iconNode.className=classNameTemp.replace("dijitSelected","dijitUnSelected");
		}
		console.log("node.iconNode.className:"+node.iconNode.className  );
	}


	
	  #foreach ($associatedClass in $manageable.allAssociatedClasses)  
      #if(${firstMenber.type.name}== ${associatedClass.name})  //associatedClass==manageable
        #foreach($memberAs in $associatedClass.AssociationEnds)//对于可修改的layout，($member in $manageable.manageableAssociationEnds)并if(!${member.many})  的字段应弹出Float的选择窗口待测试
	         #if(!${memberAs.many}) 
              #if(${memberAs.association.name}==${firstMenber.association.name})
              
              //begin from 41.4
                  	var querydata${memberAs.association.name}${associatedClass.name} =  new Array();//???????????
					function getTreeNodes(${lastMenber.name}Id,ParentSno,chitem,layerInt,layerSum){//首层layerInt=0
						var pu = new SOAPClientParameters2();
						pu.add('id',${lastMenber.name}Id) ;
						pu.add('pid',ParentSno) ;
						SOAPClient.invoke(url${firstMenber.association.name},"get${firstMenber.type.name}By${lastMenber.type.name}AndParentId", pu, false,  function GetEnu_callBack(ul, soapResponse){      //应为HandleForRoleOperateByParentId
									   var pInfo = {
													parent: chitem,		
													attribute: "children"	
										};
							   if(ul!=null && ul.length>0 ){
									 for(var i = 0; i < ul.length-1; i++){		
												  var ulo=ul[i];
												  var newitem=popStore.newItem({name:ulo["ns:handleName"] ,type:ulo["ns:handleSno"] ,eId:ulo["ns:id"],haveChild:"0",selectIf:ulo["ns:selected"]}, pInfo);//haveChild=0初始，1有子结点，2无子结点
												  if(layerInt<layerSum)getTreeNodes(${lastMenber.name}Id,ulo["ns:handleSno"]+"___",newitem,layerInt+1,layerSum);
									  }
									 if(chitem!=null){
											popStore.setValue(chitem,"haveChild","1"); 
											var node = dijit.byId("tree")._itemNodeMap[chitem.eId];
											node._updateItemClasses(node.item);
											//node.expand();       
									  }
								}else{
									popStore.setValue(chitem,"haveChild","2");  
								}       
						  });
					
					}
		
		function expandAllChildrenNode(tree,treeNode,layerInt,layerSum){
		      //treeNode.expand();
		      var childrenArray=treeNode.getChildren();
          if(childrenArray.length>0)tree._expandNode(treeNode);
          for (var i=0; i<childrenArray.length; i++){//begin	
             if(layerInt<layerSum) expandAllChildrenNode(tree,childrenArray[i],layerInt+1,layerSum);
             //if(layerInt==layerSum&&tree.model.mayHaveChildren(childrenArray[i].item))childrenArray[i].
             if(layerInt==layerSum)childrenArray[i]._updateItemClasses(childrenArray[i].item);
          }
        }       
		
		var poptarts ={ label:'name',identifier:'eId',items:querydata${memberAs.association.name}${associatedClass.name}};
         var popStore = new dojo.data.ItemFileWriteStore({data: poptarts});
		 var myModel = new dijit.tree.ForestStoreModel({
  				store: popStore,
  				rootId: "root",
  				rootLabel: "tree",
  				childrenAttrs: ["children"]
  			});      
					
								 //end from 41.4
              #end
           #end
        #end
      #end
    #end

	
#end