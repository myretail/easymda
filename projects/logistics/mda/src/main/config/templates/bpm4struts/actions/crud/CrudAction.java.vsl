#set ($generatedFile = "${manageable.actionFullPath}.java")
##
##  convencience macro
##
#macro ( memberNull $member )
#if (!$member.type.primitive)
null#elseif ($member.type.fullyQualifiedName == 'boolean')
false#else
0#end
#end
##
##  START TEMPLATE
##
// license-header java merge-point
package $manageable.manageablePackageName;

import org.apache.struts.actions.DispatchAction;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;

public final class $manageable.actionClassName extends DispatchAction
{
    public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        request.getSession().setAttribute("$manageableFormName", actionForm);
        return super.execute(mapping, actionForm, request, response);
    }

#if ($manageable.create)
    public ActionForward create(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final $manageable.formBeanType form = ($manageable.formBeanType)actionForm;

#foreach ($member in $manageable.attributes)
#if ($member.type.enumeration)
        if (StringUtils.isNotBlank(request.getParameter("$member.name")) && !${member.type.fullyQualifiedName}.literals().contains(form.${member.getterName}()))
        {
            throw new IllegalArgumentException("$member.name must be #if(!$member.required) empty or#end one of " + ${member.type.fullyQualifiedName}.literals());
        }

#end
#end
        ${manageable.manageableServiceAccessorCall}.create(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if ($member.type.enumeration)
            ${comma}(StringUtils.isBlank(request.getParameter("$member.name"))) ? #memberNull($member) : ${member.type.fullyQualifiedName}.${member.type.fromOperationName}(form.${member.getterName}())
#elseif ($member.type.dateType)
            ${comma}(StringUtils.isBlank(request.getParameter("${member.name}AsString"))) ? #memberNull($member) : form.${member.getterName}()
#elseif ($member.needsFileUpload)
            // we don't test using request.getParameter because for file uploads this will always return null
            ${comma}(form.${member.getterName}() == null) ? null : form.${member.getterName}().getFileData()
#else
            ${comma}(StringUtils.isBlank(request.getParameter("$member.name"))) ? #memberNull($member) : form.${member.getterName}()
#end
#set ($comma = ', ')
#end
        );

        return preload(mapping, actionForm, request, response);
    }

#end
#if ($manageable.read)
    public ActionForward read(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final $manageable.formBeanType form = ($manageable.formBeanType)actionForm;

        final java.util.List list = ${manageable.manageableServiceAccessorCall}.read(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if ($member.type.enumeration)
            ${comma}(StringUtils.isBlank(request.getParameter("$member.name"))) ? #memberNull($member) : ${member.type.fullyQualifiedName}.${member.type.fromOperationName}(form.${member.getterName}())
#elseif ($member.type.dateType)
            ${comma}(StringUtils.isBlank(request.getParameter("${member.name}AsString"))) ? #memberNull($member) : form.${member.getterName}()
#elseif ($member.needsFileUpload)## we ignore these ones
            ${comma} null
#else
            ${comma}(StringUtils.isBlank(request.getParameter("$member.name"))) ? #memberNull($member) : form.${member.getterName}()
#end
#set ($comma = ', ')
#end
        );
        form.${manageable.listSetterName}(list);

#if ($manageable.maximumListSize > 0)
        if (list.size() >= $manageable.maximumListSize)
        {
            saveMaxResultsWarning(request);
        }

#end
#if (!$manageable.manageableAssociationEnds.empty)
        final java.util.Map backingLists = ${manageable.manageableServiceAccessorCall}.readBackingLists();
#foreach ($member in $manageable.manageableAssociationEnds)
        form.${member.setterName}BackingList((java.util.List)backingLists.get("$member.name"));
#end

#end
        return mapping.getInputForward();
    }

#end
#if ($manageable.preload)
    public ActionForward preload(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final $manageable.formBeanType form = ($manageable.formBeanType)actionForm;

        final java.util.List list = ${manageable.manageableServiceAccessorCall}.readAll();
        form.${manageable.listSetterName}(list);

## set all default attribute values
#foreach ($member in $manageable.attributes)
#if ($member.defaultValue && !$member.needsFileUpload)
#if ($member.type.enumeration)
#set ($memberType = $member.type.literalType)
#else
#set ($memberType = $member.type)
#end
#if ($memberType.dateType)
        form.${member.setterName}AsString("$member.defaultValue");
#elseif ($memberType.stringType)
        form.${member.setterName}("$member.defaultValue");
#elseif ($memberType.primitive)
#if ($memberType.fullyQualifiedName == 'char')
        form.${member.setterName}('$member.defaultValue.charAt(0)');
#else
        form.${member.setterName}($member.defaultValue);
#end
#else
#if ($memberType.fullyQualifiedName == 'java.lang.Character')
        form.${member.setterName}(new ${memberType.fullyQualifiedName}('$member.defaultValue.charAt(0)'));
#else
        form.${member.setterName}(new ${memberType.fullyQualifiedName}("$member.defaultValue"));
#end
#end
#end
#end

#if ($manageable.maximumListSize > 0)
        if (list.size() >= $manageable.maximumListSize)
        {
            saveMaxResultsWarning(request);
        }

#end
#if (!$manageable.manageableAssociationEnds.empty)
        final java.util.Map backingLists = ${manageable.manageableServiceAccessorCall}.readBackingLists();
#foreach ($member in $manageable.manageableAssociationEnds)
#set ($referenceParameterName = "$manageableReferenceParameterPrefix$member.type.name")
        if (StringUtils.isNotBlank(request.getParameter("$referenceParameterName")))
        {
## here we assume the id is of a type (with a wrapper) supporting .valueOf(String)
#set ($identifierType = $member.type.identifiers.iterator().next().type)
#if ($member.many)
            final ${identifierType.fullyQualifiedName}[] array = new ${identifierType.fullyQualifiedName}[1];
            array[0] = new ${identifierType.fullyQualifiedName}(request.getParameter("$referenceParameterName"));
            form.${member.setterName}(array);
#else
#if ($identifierType.primitive)
            form.${member.setterName}(${identifierType.wrapperName}.valueOf(request.getParameter("$referenceParameterName")));
#else
            form.${member.setterName}(new ${identifierType.fullyQualifiedName}(request.getParameter("$referenceParameterName")));
#end
#end
        }
        form.${member.setterName}BackingList((java.util.List)backingLists.get("$member.name"));
#end

#end
        return mapping.getInputForward();
    }

    protected ActionForward unspecified(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        return preload(mapping, actionForm, request, response);
    }

#end
#if ($manageable.update)
    public ActionForward update(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final $manageable.formBeanType form = ($manageable.formBeanType) actionForm;

#foreach ($member in $manageable.attributes)
#if ($member.type.enumeration)
        if (StringUtils.isNotBlank(request.getParameter("$member.name")) && !${member.type.fullyQualifiedName}.literals().contains(form.${member.getterName}()))
        {
            throw new IllegalArgumentException("$member.name must be #if(!$member.required) empty or#end one of " + ${member.type.fullyQualifiedName}.literals());
        }

#end
#end
        ${manageable.manageableServiceAccessorCall}.update(
#set ($comma = '')
#foreach ($member in $manageable.manageableMembers)
#if ($member.type.enumeration)
            ${comma}(StringUtils.isBlank(request.getParameter("$member.name"))) ? #memberNull($member) : ${member.type.fullyQualifiedName}.${member.type.fromOperationName}(form.${member.getterName}())
#elseif ($member.type.dateType)
            ${comma}(StringUtils.isBlank(request.getParameter("${member.name}AsString"))) ? #memberNull($member) : form.${member.getterName}()
#elseif ($member.needsFileUpload)
            // we don't test using request.getParameter because for file uploads this will always return null
            ${comma}(form.${member.getterName}() == null) ? null : form.${member.getterName}().getFileData()
#else
            ${comma}(StringUtils.isBlank(request.getParameter("$member.name"))) ? #memberNull($member) : form.${member.getterName}()
#end
#set ($comma = ', ')
#end
        );

        return preload(mapping, actionForm, request, response);
    }

#end
#if ($manageable.delete)
    public ActionForward delete(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final $manageable.formBeanType form = ($manageable.formBeanType) actionForm;

#if (!$manageable.identifiers.empty)
#set ($identifier = $manageable.identifiers.iterator().next())
#end
        final ${identifier.type.fullyQualifiedName}[] selectedRows = form.getSelectedRows();
        if (selectedRows != null && selectedRows.length > 0)
        {
            ${manageable.manageableServiceAccessorCall}.delete(selectedRows);
        }

        return preload(mapping, actionForm, request, response);
    }

#end
#foreach ($member in $manageable.attributes)
#if ($member.needsFileUpload)
    public ActionForward ${member.getterName}(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
#if (!$manageable.identifiers.empty)
#set ($identifier = $manageable.identifiers.iterator().next())
#end
        final $manageable.formBeanType form = ($manageable.formBeanType) actionForm;
        final $member.type.fullyQualifiedName $member.name = ${manageable.manageableServiceAccessorCall}.${member.getterName}(form.${identifier.getterName}());

        if ($member.name != null)
        {
            response.setContentType("application/octet-stream");
            response.setContentLength(${member.name}.length);
            response.setHeader("Content-disposition", "attachment; filename=${manageable.name.toLowerCase()}-${member.name}.bin");
            response.getOutputStream().write($member.name);
        }

        // let the browser simply download the field, do not forward
        return null;
    }

#end
#end
#if ($manageable.maximumListSize > 0)
    private void saveMaxResultsWarning(HttpServletRequest request)
    {
        final HttpSession session = request.getSession();

        ActionMessages messages = (ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$warningMessagesKey", new ActionMessage("maximum.results.fetched.warning", "$manageable.maximumListSize"));
    }

#end
}
